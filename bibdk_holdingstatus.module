<?php

/**
 * Implements hook_menu();
 */
function bibdk_holdingstatus_menu() {
  $items['overlay/holdings/%'] = array(
    'title' => t('Localisations', array(), array('context' => 'bibdk_holdingstatus')),
    'page callback' => 'bibdk_holdingstatus_get_localisation',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}


function bibdk_holdingstatus_get_localisation($pids) {
  global $user;
  $agency_id = FALSE;
  $num_per_page = 10;

  // TO DO: Do this call as a hook? or method in ding_provider?
  $favourites = _bibdk_favourite_get_from_webservice();
  if ( !empty($favourites) ) {
    foreach ($favourites as $bibnr => $favourite) {
      if ( $favourite->orderAgency == TRUE) {
        $agency_id = $bibnr;
      }
    }
  }

  $ids = explode(',', $pids);
  if ( $agency_id ) {
    $result = open_holdingstatus_localisationRequest($ids, $agency_id);
  }
  else {
    $result = open_holdingstatus_localisationRequest($ids);
  }

  $agencies = array();
  $error_messages = array();

  foreach ($result as $pid) {
    if ( isset( $pid['error_message']) ) {
      $error_messages[] = $pid['error_message'];
    }
    if ( isset( $pid['agencies']) ) {
      foreach ($pid['agencies'] as $localisation) {
        $agencyId = $localisation['agencyId'];
        $agencies[$agencyId] = $localisation;
      }
    }
  }

  $count_localisations = count($agencies);

  if ( !$count_localisations ) {
    $error_messages = array_unique($error_messages);
  }

  $page = pager_default_initialize($count_localisations, $num_per_page);

  $offset = $num_per_page * $page;

  $agencies = array_slice($agencies, $offset, $num_per_page, $preserve_keys=TRUE);

  foreach ($agencies as $agencyId => $agency) {

    $client = new ting_client_class();
    $response = $client->do_agency(
      array(
        'action'         => 'serviceRequest',
        'agencyId'       => $agencyId,
        'service'        => 'information',
        'outputType'     => 'php',
      )
    );
    bibdk_holdingstatus_handle_response(unserialize($response), $agencies, $agencyId);

  }

  $output['errors'] = ( !$count_localisations ) ? array(
    '#items' => $error_messages,
    '#theme' => 'item_list',
    '#attributes' => array(
      'class' => array('error-messages'),
    ),
  ) : NULL;

  $output['count_localisations'] = ( $count_localisations ) ? array(
    '#type' => 'markup',
    '#markup' => '<p class="count-localisations">' . t("There are %n localisations", array('%n' => $count_localisations), array('context' => 'bibdk_holdingstatus')) . '</p>',
  ) : NULL;

  $output['note_localisations'] = ( $count_localisations ) ? array(
    '#type' => 'markup',
    '#markup' => '<p class="note-localisations">' . t("NB! Send your reservation to the library, where you want to pick up the material.", array(), array('context' => 'bibdk_holdingstatus')) . '</p>',
  ) : NULL;

  $output['list_localisations'] = array(
    '#items' => $agencies,
    '#theme' => 'item_list',
    '#attributes' => array(
      'class' => array('list-agencies'),
    ),
  );

  $output['pager_localisations'] = array(
    '#type' => 'markup',
    '#markup' => theme('pager'),
    '#attributes' => array(
      'class' => array('pager-agencies'),
    ),
  );


  return $output;

}

/**
 * Handling the response (and errors)
 * @param array $response
 * @return array
 */
function bibdk_holdingstatus_handle_response($response, &$agencies, $agencyId) {

  if ( isset($response->serviceResponse->_value->information->_value->agencyName->_value) ) {
    $response = $response->serviceResponse->_value->information->_value;
    $agencies[$agencyId]['branchId'] = $response->branchId ->_value;
    $agencies[$agencyId]['agencyName'] = $response->agencyName->_value;
    $agencies[$agencyId]['branchName'] = $response->branchName->_value;
    $agencies[$agencyId]['postalAddress'] = $response->postalAddress->_value;
    $agencies[$agencyId]['postalCode'] = $response->postalCode->_value;
    $agencies[$agencyId]['city'] = $response->city->_value;
    $agencies[$agencyId]['lookupUrl'] = _bibdk_holdingstatus_create_lookupUrl($response->lookupUrl->_value, $agencies[$agencyId]['localIdentifier']);
    $agencies[$agencyId] = theme('localisation_agencies', array('agencies' => $agencies[$agencyId]));
  }
  else if (isset($response->error)) {
    $error = $this->getValue($response->error);
    drupal_set_message(t($error, array(), array('context' => 'bibdk_holdingstatus')), 'error');
  }
  else if (!isset($response->error) && isset($response->serviceResponse->_value->error->_value)) {
    $agencies[$agencyId]['error'] = t($response->serviceResponse->_value->error->_value, array('context' => 'bibdk_holdingstatus'));
  }
  else if (!isset($response->error) && !isset($response->serviceResponse->_value->information->_value->agencyName->_value)) {
    $error = t('no_libraries_found_and_no_errors_reported');
    drupal_set_message(t($error, array(), array('context' => 'bibdk_holdingstatus')), 'error');
  }
}


function bibdk_holdingstatus_theme() {
  return array(
    'localisation_agencies' => array(
      'template' => 'localisation-agencies',
      'variables' => array('agencies' => null),
    ),
  );
}


/**
 * Helper function: Create render array for lookupUrl
 * @return array
 */
function _bibdk_holdingstatus_create_lookupUrl($lookupUrl, $localIdentifier) {
  if ( !$lookupUrl ) {
    return array();
  }
  return array(
      '#type' => 'link',
      '#title' => '<span>' . t("Look up the material in the library catalog.", array(), array('context' => 'bibdk_holdingstatus')) . '</span>',
      '#href' => ( strpos($lookupUrl, '_IDNR_') !== false ) ? str_replace('_IDNR_', $localIdentifier, $lookupUrl) : $lookupUrl . $localIdentifier ,
      '#options' => array(
        'html' => TRUE,
      ),
      '#attributes' => array(
        'class'  => array('bibdk-popup-link', 'lookup-url'),
        'rel'  => array('lookupUrl'),
      ),
  );
}

